import cv2
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from scipy.spatial.distance import cdist
from matplotlib.colors import LinearSegmentedColormap
import pandas as pd
from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Button, Slider

# Configuration constants
CELL_SIZE = 20
POWER = 2
IMAGE_PATH = "feet-outline-paper-crafts.png"
EXCEL_PATH = "Dataa.xlsx"  # T√™n file t·ª´ artifact

# V·ªã tr√≠ c·ªë ƒë·ªãnh c·ªßa c√°c c·∫£m bi·∫øn (grid coordinates)
SENSOR_POSITIONS = {
    'M01': (22, 95), 
    'M02': (14, 75),
    'M03': (32, 75),
    'M04': (8, 40),
    'M05': (22, 40),
    'M06': (38, 38),
    'M07': (11, 14),
    'M08': (31, 15)
}

class PressureMapVideoPlayer:
    def __init__(self, excel_path, image_path):
        self.excel_path = excel_path
        self.image_path = image_path
        self.current_frame = 0
        self.total_frames = 0
        self.is_playing = True
        self.animation = None
        
        # Load v√† setup data
        self.load_excel_data()
        self.setup_image_processing()
        self.create_single_window()
        
    def load_excel_data(self):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel ƒë∆∞·ª£c t·∫°o t·ª´ artifact"""
        try:
            # Th·ª≠ ƒë·ªçc file Excel v·ªõi c√°c engine kh√°c nhau
            engines = ['openpyxl', 'xlrd', None]
            df = None
            
            for engine in engines:
                try:
                    if engine:
                        df = pd.read_excel(self.excel_path, engine=engine)
                    else:
                        df = pd.read_excel(self.excel_path)
                    print(f"‚úì ƒê·ªçc file Excel th√†nh c√¥ng v·ªõi engine: {engine or 'default'}")
                    break
                except Exception as e:
                    print(f"‚ö† Th·ª≠ engine {engine}: {e}")
                    continue
            
            if df is None:
                raise Exception("Kh√¥ng th·ªÉ ƒë·ªçc file Excel v·ªõi b·∫•t k·ª≥ engine n√†o")
            
            # Hi·ªÉn th·ªã th√¥ng tin file
            print(f"‚úì D·ªØ li·ªáu g·ªëc: {df.shape[0]} rows, {df.shape[1]} columns")
            print(f"‚úì C√°c c·ªôt: {list(df.columns)}")
            
            # X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng file kh√°c nhau
            sensor_cols = ['M01', 'M02', 'M03', 'M04', 'M05', 'M06', 'M07', 'M08']
            
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu c·∫£m bi·∫øn
            available_sensors = []
            for sensor in sensor_cols:
                if sensor in df.columns:
                    available_sensors.append(sensor)
                else:
                    # Th·ª≠ t√¨m c·ªôt t∆∞∆°ng t·ª±
                    for col in df.columns:
                        if sensor.lower() in col.lower() or col.lower() in sensor.lower():
                            available_sensors.append(col)
                            print(f"‚úì √Ånh x·∫° {sensor} -> {col}")
                            break
                    else:
                        available_sensors.append(None)
                        print(f"‚ö† Kh√¥ng t√¨m th·∫•y c·ªôt {sensor}")
            
            # T·∫°o dataframe c·∫£m bi·∫øn v·ªõi d·ªØ li·ªáu s·∫°ch
            sensor_data = {}
            for i, sensor in enumerate(sensor_cols):
                col_name = available_sensors[i]
                if col_name and col_name in df.columns:
                    # L√†m s·∫°ch d·ªØ li·ªáu - chuy·ªÉn v·ªÅ s·ªë
                    values = pd.to_numeric(df[col_name], errors='coerce').fillna(0)
                    sensor_data[sensor] = values.values
                else:
                    # T·∫°o d·ªØ li·ªáu 0 cho c·∫£m bi·∫øn thi·∫øu
                    sensor_data[sensor] = np.zeros(len(df))
            
            self.sensor_data = pd.DataFrame(sensor_data)
            self.total_frames = len(self.sensor_data)
            
            # Th·ªëng k√™ d·ªØ li·ªáu
            print(f"\nüìä TH·ªêNG K√ä D·ªÆ LI·ªÜU:")
            print(f"   T·ªïng s·ªë frames: {self.total_frames}")
            print(f"   √Åp su·∫•t max: {self.sensor_data.max().max():.2f}")
            print(f"   √Åp su·∫•t min: {self.sensor_data.min().min():.2f}")
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc Excel: {e}")
            print("üîÑ T·∫°o d·ªØ li·ªáu m·∫´u thay th·∫ø...")
            self.create_sample_data()
    
    def create_sample_data(self):
        """T·∫°o d·ªØ li·ªáu m·∫´u khi kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file Excel"""
        np.random.seed(42)
        frames = 120  # T∆∞∆°ng ·ª©ng v·ªõi 1.2s ·ªü 100Hz
        
        # T·∫°o d·ªØ li·ªáu theo c√°c giai ƒëo·∫°n nh∆∞ trong artifact
        phases = [
            {"name": "Initial contact", "start": 0, "end": 2},
            {"name": "Loading response", "start": 2, "end": 12},
            {"name": "Mid stance", "start": 12, "end": 31},
            {"name": "Terminal stance", "start": 31, "end": 50},
            {"name": "Pre-swing", "start": 50, "end": 62},
            {"name": "Initial swing", "start": 62, "end": 75},
            {"name": "Mid swing", "start": 75, "end": 100},
            {"name": "Terminal swing", "start": 100, "end": 120}
        ]
        
        # T·∫°o d·ªØ li·ªáu c·∫£m bi·∫øn theo logic th·ª±c t·∫ø
        sensor_data = {}
        for sensor in SENSOR_POSITIONS.keys():
            values = []
            for i in range(frames):
                phase_name = self.get_phase_name(i, phases)
                pressure = self.generate_realistic_pressure(sensor, phase_name, i)
                values.append(pressure)
            sensor_data[sensor] = values
        
        self.sensor_data = pd.DataFrame(sensor_data)
        self.total_frames = frames
        
        print(f"‚úì T·∫°o {frames} frames d·ªØ li·ªáu m·∫´u th·ª±c t·∫ø")
        print(f"‚úì M√¥ ph·ªèng 8 giai ƒëo·∫°n b∆∞·ªõc ch√¢n")
    
    def get_phase_name(self, frame_idx, phases):
        """L·∫•y t√™n giai ƒëo·∫°n theo frame"""
        for phase in phases:
            if phase["start"] <= frame_idx < phase["end"]:
                return phase["name"]
        return "Terminal swing"
    
    def generate_realistic_pressure(self, sensor, phase_name, sample_idx):
        """T·∫°o √°p su·∫•t th·ª±c t·∫ø theo giai ƒëo·∫°n v√† c·∫£m bi·∫øn"""
        base_pressure = 0.0
        noise = np.random.normal(0, 0.05)  # Nhi·ªÖu nh·ªè
        
        # Logic √°p su·∫•t theo t·ª´ng c·∫£m bi·∫øn v√† giai ƒëo·∫°n
        if phase_name == "Loading response":
            if sensor == "M01":  # G√≥t ch√¢n
                base_pressure = 2.0 + sample_idx * 0.2
            elif sensor == "M02":
                base_pressure = 0.2
        
        elif phase_name == "Mid stance":
            if sensor == "M01":
                base_pressure = 4.0
            elif sensor == "M02":
                base_pressure = 1.5
            elif sensor == "M03":
                base_pressure = 1.2
            elif sensor == "M04":
                base_pressure = 0.3
        
        elif phase_name == "Terminal stance":
            if sensor == "M01":
                base_pressure = 3.5
            elif sensor == "M02":
                base_pressure = 2.5
            elif sensor == "M03":
                base_pressure = 2.0
            elif sensor == "M04":
                base_pressure = 1.0
            elif sensor == "M05":
                base_pressure = 0.5
        
        elif phase_name == "Pre-swing":
            if sensor in ["M04", "M05", "M06", "M07", "M08"]:  # M≈©i ch√¢n
                base_pressure = 2.0 + np.random.uniform(0, 1.0)
            elif sensor in ["M01", "M02", "M03"]:  # G√≥t v√† gi·ªØa ch√¢n
                base_pressure = max(0, 1.5 - sample_idx * 0.1)
        
        # Swing phases
        elif "swing" in phase_name.lower():
            base_pressure = 0.0
        
        return max(0, min(4.5, base_pressure + noise))
    
    def setup_image_processing(self):
        """Setup x·ª≠ l√Ω ·∫£nh v√† grid"""
        try:
            # Load image
            image = cv2.imread(self.image_path, cv2.IMREAD_GRAYSCALE)
            if image is None:
                print("‚ö† Kh√¥ng t√¨m th·∫•y ·∫£nh, t·∫°o h√¨nh b√†n ch√¢n m·∫∑c ƒë·ªãnh")
                image = self.create_default_foot_shape()
            else:
                print(f"‚úì ƒê√£ load ·∫£nh: {self.image_path}")
            
            # T·∫°o mask
            _, binary = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY_INV)
            contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            self.foot_mask = np.zeros_like(image, dtype=np.uint8)
            if contours:
                cv2.fillPoly(self.foot_mask, contours, 255)
            else:
                self.foot_mask = np.ones_like(image) * 255
            
            self.height, self.width = image.shape[:2]
            self.cols = self.width // CELL_SIZE
            self.rows = self.height // CELL_SIZE
            
            print(f"‚úì Grid: {self.cols}x{self.rows} cells, Image: {self.width}x{self.height}px")
            
        except Exception as e:
            print(f"‚ö† L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
            self.width, self.height = 50 * CELL_SIZE, 120 * CELL_SIZE
            self.foot_mask = self.create_default_mask()
            self.cols, self.rows = 50, 120
    
    def create_default_foot_shape(self):
        """T·∫°o h√¨nh d·∫°ng b√†n ch√¢n m·∫∑c ƒë·ªãnh"""
        height, width = 120 * CELL_SIZE, 50 * CELL_SIZE
        image = np.zeros((height, width), dtype=np.uint8)
        
        # V·∫Ω h√¨nh b√†n ch√¢n ƒë∆°n gi·∫£n
        cv2.ellipse(image, (width//2, height//4), (width//3, height//6), 0, 0, 360, 255, -1)  # Ng√≥n ch√¢n
        cv2.ellipse(image, (width//2, height*2//3), (width//4, height//3), 0, 0, 360, 255, -1)  # G√≥t ch√¢n
        
        return image
    
    def create_default_mask(self):
        """T·∫°o mask m·∫∑c ƒë·ªãnh"""
        mask = np.zeros((self.height, self.width), dtype=np.uint8)
        cv2.ellipse(mask, (self.width//2, self.height//2), 
                   (self.width//3, self.height//2), 0, 0, 360, 255, -1)
        return mask
    
    def create_single_window(self):
        """T·∫°o c·ª≠a s·ªï duy nh·∫•t ch·ª©a video v√† controls"""
        # T·∫°o figure v·ªõi layout t√πy ch·ªânh
        self.fig = plt.figure(figsize=(12, 10))
        plt.suptitle('Pressure Map ', fontsize=16, fontweight='bold')
        
        # Main plot area cho pressure map - cƒÉn gi·ªØa
        self.ax_main = plt.axes([0.1, 0.15, 0.8, 0.75])  # [left, bottom, width, height]
        
        # Control panel ·ªü d∆∞·ªõi
        ax_play = plt.axes([0.3, 0.05, 0.1, 0.05])
        ax_slider = plt.axes([0.1, 0.02, 0.8, 0.02])
        
        # T·∫°o controls
        self.btn_play = Button(ax_play, 'Pause', color='lightcoral')
        
        # ƒê·∫£m b·∫£o slider c√≥ gi√° tr·ªã max h·ª£p l·ªá
        max_frame = max(1, self.total_frames - 1) if self.total_frames > 0 else 1
        self.frame_slider = Slider(ax_slider, 'Frame', 0, max_frame, 
                                  valinit=0, valfmt='%d')
        
        # Connect events
        self.btn_play.on_clicked(self.toggle_play_pause)
        self.frame_slider.on_changed(self.on_slider_change)
        self.fig.canvas.mpl_connect('key_press_event', self.on_key_press)
        
        # Setup colormap
        colors = ['#000080', '#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF8000', '#FF0000']
        self.pressure_cmap = LinearSegmentedColormap.from_list('pressure', colors, N=256)
        
        # T√≠nh max pressure ƒë·ªÉ scale colorbar
        self.max_pressure = max(self.sensor_data.max().max(), 1.0) if self.total_frames > 0 else 1.0
        
        print("\nüéÆ ƒêI·ªÄU KHI·ªÇN:")
        print("  Space: Play/Pause")
        print("  ‚Üê/‚Üí: Frame tr∆∞·ªõc/sau")
        print("  K√©o slider: Nh·∫£y frame")
        print(f"  T·ªïng c·ªông: {self.total_frames} frames\n")
    
    def convert_coordinates_and_interpolate(self, pressure_values):
        """Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô v√† t·∫°o grid √°p su·∫•t"""
        # Convert sensor positions to normalized coordinates
        sensor_positions = {}
        for sensor_name, (gx, gy) in SENSOR_POSITIONS.items():
            pixel_x = gx * CELL_SIZE + CELL_SIZE // 2
            pixel_y = gy * CELL_SIZE + CELL_SIZE // 2
            
            norm_x = (pixel_x / self.width) * 100
            norm_y = ((self.height - pixel_y) / self.height) * 100
            
            sensor_positions[sensor_name] = [norm_x, norm_y]
        
        # Create pressure grid using IDW interpolation
        pressure_grid = np.zeros((self.rows, self.cols))
        
        sensor_coords = np.array(list(sensor_positions.values()))
        sensor_values = np.array([pressure_values.get(name, 0) for name in sensor_positions.keys()])
        
        for row in range(self.rows):
            for col in range(self.cols):
                center_x = col * CELL_SIZE + CELL_SIZE // 2
                center_y = row * CELL_SIZE + CELL_SIZE // 2
                
                # Check if point is within foot area
                if (center_y < self.height and center_x < self.width and 
                    self.foot_mask[center_y, center_x] > 0):
                    
                    # Normalize target point
                    norm_x = (center_x / self.width) * 100
                    norm_y = ((self.height - center_y) / self.height) * 100
                    target_point = np.array([[norm_x, norm_y]])
                    
                    # Calculate distances to all sensors
                    distances = cdist(target_point, sensor_coords)[0]
                    distances = np.where(distances == 0, 1e-10, distances)
                    
                    # IDW interpolation
                    weights = 1.0 / (distances ** POWER)
                    weights_normalized = weights / weights.sum()
                    
                    pressure_value = np.sum(weights_normalized * sensor_values)
                    pressure_grid[row, col] = pressure_value
                else:
                    pressure_grid[row, col] = np.nan
        
        return pressure_grid, sensor_positions, pressure_values
    
    def update_frame(self, frame_idx=None):
        """C·∫≠p nh·∫≠t frame hi·ªán t·∫°i"""
        if frame_idx is not None:
            self.current_frame = int(frame_idx)
        
        if self.total_frames == 0:
            return
        
        # ƒê·∫£m b·∫£o frame trong ph·∫°m vi h·ª£p l·ªá
        self.current_frame = max(0, min(self.current_frame, self.total_frames - 1))
        
        # L·∫•y d·ªØ li·ªáu frame hi·ªán t·∫°i
        current_data = self.sensor_data.iloc[self.current_frame].to_dict()
        
        # T·∫°o pressure grid
        pressure_grid, sensor_positions, pressure_values = self.convert_coordinates_and_interpolate(current_data)
        
        # Clear v√† v·∫Ω l·∫°i main plot
        self.ax_main.clear()
        
        # Hi·ªÉn th·ªã pressure map
        display_grid = np.where(np.isnan(pressure_grid), 0, pressure_grid)
        
        im = self.ax_main.imshow(display_grid, cmap=self.pressure_cmap, 
                                vmin=0, vmax=self.max_pressure, 
                                aspect='equal', interpolation='bilinear')
        
        # V·∫Ω sensor positions v√† values
        for sensor_name, (gx, gy) in SENSOR_POSITIONS.items():
            pressure = current_data.get(sensor_name, 0)
            
            # Sensor marker
            self.ax_main.plot(gx, gy, 'o', color='white', markersize=10, 
                             markeredgecolor='black', markeredgewidth=2)
            
            # Sensor label
            self.ax_main.text(gx, gy-3, sensor_name, ha='center', va='center', 
                             fontsize=8, fontweight='bold', color='white',
                             bbox=dict(boxstyle="round,pad=0.2", facecolor="black", alpha=0.8))
            
            # Pressure value
            self.ax_main.text(gx, gy+3, f'{pressure:.2f}', ha='center', va='center', 
                             fontsize=7, fontweight='bold', color='black',
                             bbox=dict(boxstyle="round,pad=0.2", facecolor="yellow", alpha=0.9))
        
        # Setup axes - ch·ªâ hi·ªÉn th·ªã frame number
        self.ax_main.set_title(f'Frame {self.current_frame + 1}/{self.total_frames}', 
                              fontsize=14, fontweight='bold')
        self.ax_main.set_xlim(-0.5, self.cols-0.5)
        self.ax_main.set_ylim(self.rows-0.5, -0.5)
        self.ax_main.set_xlabel('Grid X')
        self.ax_main.set_ylabel('Grid Y')
        
        # Add colorbar n·∫øu ch∆∞a c√≥
        if not hasattr(self, 'colorbar'):
            self.colorbar = self.fig.colorbar(im, ax=self.ax_main, shrink=0.6)
            self.colorbar.set_label('Pressure (Bar)', rotation=270, labelpad=15)
        
        # Update slider position
        if hasattr(self, 'frame_slider'):
            self.frame_slider.set_val(self.current_frame)
        
        self.fig.canvas.draw_idle()
    
    def animate(self, frame):
        """Animation function"""
        if self.is_playing and self.total_frames > 0:
            self.current_frame = frame % self.total_frames
            self.update_frame()
        return []
    
    def toggle_play_pause(self, event):
        """Toggle play/pause"""
        self.is_playing = not self.is_playing
        self.btn_play.label.set_text('Play' if not self.is_playing else 'Pause')
        self.fig.canvas.draw_idle()
    
    def on_slider_change(self, val):
        """X·ª≠ l√Ω slider change"""
        if not self.is_playing:
            self.current_frame = int(val)
            self.update_frame()
    
    def on_key_press(self, event):
        """X·ª≠ l√Ω ph√≠m t·∫Øt"""
        if event.key == ' ':  # Space
            self.toggle_play_pause(None)
        elif event.key == 'left' and self.current_frame > 0:
            self.current_frame -= 1
            self.update_frame()
        elif event.key == 'right' and self.current_frame < self.total_frames - 1:
            self.current_frame += 1
            self.update_frame()
    
    def start_video(self, interval=100):
        """B·∫Øt ƒë·∫ßu ph√°t video"""
        if self.total_frames > 0:
            print(f"üé¨ B·∫Øt ƒë·∫ßu ph√°t video v·ªõi {self.total_frames} frames")
            
            # Hi·ªÉn th·ªã frame ƒë·∫ßu ti√™n
            self.update_frame(0)
            
            # T·∫°o animation
            self.animation = FuncAnimation(
                self.fig, self.animate, frames=self.total_frames,
                interval=interval, repeat=True, blit=False
            )
            
            plt.show()
        else:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√°t!")

def main():
    """H√†m ch√≠nh"""
    print("üöÄ Kh·ªüi ƒë·ªông Pressure Map Video Player...")
    print("üìÅ T√¨m ki·∫øm file d·ªØ li·ªáu...")
    
    # Th·ª≠ c√°c t√™n file c√≥ th·ªÉ c√≥
    possible_files = [
        "foot_pressure_continuous_data.xls",
        "foot_pressure_continuous_data.xlsx", 
        "foot_pressure_data.csv",
        "Dataa.xlsx",
        "data.xlsx"
    ]
    
    excel_file = None
    for filename in possible_files:
        try:
            # Ki·ªÉm tra file t·ªìn t·∫°i
            import os
            if os.path.exists(filename):
                excel_file = filename
                print(f"‚úì T√¨m th·∫•y file: {filename}")
                break
        except:
            continue
    
    if not excel_file:
        print("‚ö† Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu, s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u")
        excel_file = "foot_pressure_continuous_data.xls"  # S·∫Ω t·∫°o sample data
    
    try:
        # T·∫°o video player
        player = PressureMapVideoPlayer(excel_file, IMAGE_PATH)
        
        # B·∫Øt ƒë·∫ßu ph√°t video (100ms = 10 FPS)
        player.start_video(interval=100)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()